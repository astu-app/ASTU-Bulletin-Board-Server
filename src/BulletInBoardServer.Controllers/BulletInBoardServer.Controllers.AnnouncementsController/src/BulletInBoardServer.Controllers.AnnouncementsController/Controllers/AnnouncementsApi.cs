/*
 * API Шлюз. Объявления
 *
 * API шлюза для управления объявлениями
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using BulletInBoardServer.Controllers.AnnouncementsController.Attributes;
using BulletInBoardServer.Controllers.AnnouncementsController.Models;
using Microsoft.AspNetCore.Mvc;

namespace BulletInBoardServer.Controllers.AnnouncementsController.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class AnnouncementsApiController : ControllerBase
    { 
        /// <summary>
        /// Создать объявление
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="createAnnouncementDto"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/api/announcements/create")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 201, type: typeof(Guid))]
        [ProducesResponseType(statusCode: 400, type: typeof(CreateAnnouncement400Response))]
        [ProducesResponseType(statusCode: 403, type: typeof(CreateAnnouncementForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(CreateAnnouncementNotFound))]
        [ProducesResponseType(statusCode: 409, type: typeof(CreateAnnouncementConflict))]
        public abstract IActionResult CreateAnnouncement([FromHeader][Required()]Guid xUserId, [FromBody]CreateAnnouncementDto createAnnouncementDto);

        /// <summary>
        /// Удалить объявление
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="body"></param>
        /// <response code="200">Ok</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpDelete]
        [Route("/api/announcements/delete")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 403, type: typeof(DeleteAnnouncementForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(DeleteAnnouncementNotFound))]
        public abstract IActionResult DeleteAnnouncement([FromHeader][Required()]Guid xUserId, [FromBody]Guid body);

        /// <summary>
        /// Получить подробности о выбранном объявлении
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="id">Идентификатор объявления</param>
        /// <response code="200">Ok</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/api/announcements/get-details/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(AnnouncementDetailsDto))]
        [ProducesResponseType(statusCode: 403, type: typeof(GetAnnouncementDetailsForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(GetAnnouncementDetailsNotFound))]
        public abstract IActionResult GetAnnouncementDetails([FromHeader][Required()]Guid xUserId, [FromRoute (Name = "id")][Required]Guid id);

        /// <summary>
        /// Получить данные для редактирования объявления
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="id">Идентификатор объявления</param>
        /// <response code="200">Ok</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/api/announcements/get-update-content/{id}")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(ContentForAnnouncementUpdatingDto))]
        [ProducesResponseType(statusCode: 403, type: typeof(GetAnnouncementUpdateContentForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(GetAnnouncementUpdateContentNotFound))]
        public abstract IActionResult GetAnnouncementUpdateContent([FromHeader][Required()]Guid xUserId, [FromRoute (Name = "id")][Required]Guid id);

        /// <summary>
        /// Получить список объявлений, ожидающих отложенное сокрытие
        /// </summary>
        /// <param name="xUserId"></param>
        /// <response code="200">Ok</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/api/announcements/delayed-hidden/get-list")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<AnnouncementSummaryDto>))]
        [ProducesResponseType(statusCode: 403, type: typeof(GetDelayedHiddenAnnouncementListForbidden))]
        public abstract IActionResult GetDelayedHiddenAnnouncementList([FromHeader][Required()]Guid xUserId);

        /// <summary>
        /// Получить список объявлений, ожидающих отложенную публикацию
        /// </summary>
        /// <param name="xUserId"></param>
        /// <response code="200">Ok</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/api/announcements/delayed-publishing/get-list")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<AnnouncementSummaryDto>))]
        [ProducesResponseType(statusCode: 403, type: typeof(GetDelayedPublishingAnnouncementListForbidden))]
        public abstract IActionResult GetDelayedPublishingAnnouncementList([FromHeader][Required()]Guid xUserId);

        /// <summary>
        /// Получить список скрытых объявлений
        /// </summary>
        /// <param name="xUserId"></param>
        /// <response code="200">Ok</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/api/announcements/hidden/get-list")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<AnnouncementSummaryDto>))]
        [ProducesResponseType(statusCode: 403, type: typeof(GetHiddenAnnouncementListForbidden))]
        public abstract IActionResult GetHiddenAnnouncementList([FromHeader][Required()]Guid xUserId);

        /// <summary>
        /// Получить список опубликованных объявлений
        /// </summary>
        /// <param name="xUserId"></param>
        /// <response code="200">Ok</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/api/announcements/published/get-list")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 200, type: typeof(List<AnnouncementSummaryDto>))]
        [ProducesResponseType(statusCode: 403, type: typeof(GetPostedAnnouncementListForbidden))]
        public abstract IActionResult GetPostedAnnouncementList([FromHeader][Required()]Guid xUserId);

        /// <summary>
        /// Скрыть опубликованное объявление
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="body"></param>
        /// <response code="200">Ok</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/api/announcements/published/hide")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 403, type: typeof(HidePostedAnnouncementForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(HidePostedAnnouncementNotFound))]
        [ProducesResponseType(statusCode: 409, type: typeof(HidePostedAnnouncementConflict))]
        public abstract IActionResult HidePostedAnnouncement([FromHeader][Required()]Guid xUserId, [FromBody]Guid body);

        /// <summary>
        /// Сразу опубликовать отложенное объявление
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="body"></param>
        /// <response code="200">Ok</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/api/announcements/delayed-publishing/publish-immediately")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 403, type: typeof(PublishImmediatelyDelayedPublishingAnnouncementForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(PublishImmediatelyDelayedPublishingAnnouncementNotFound))]
        public abstract IActionResult PublishImmediatelyDelayedPublishingAnnouncement([FromHeader][Required()]Guid xUserId, [FromBody]Guid body);

        /// <summary>
        /// Восстановить скрытое объявление
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="body"></param>
        /// <response code="200">Ok</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPost]
        [Route("/api/announcements/hidden/restore")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 403, type: typeof(RestoreHiddenAnnouncementForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(RestoreHiddenAnnouncementNotFound))]
        [ProducesResponseType(statusCode: 409, type: typeof(RestoreHiddenAnnouncementConflict))]
        public abstract IActionResult RestoreHiddenAnnouncement([FromHeader][Required()]Guid xUserId, [FromBody]Guid body);

        /// <summary>
        /// Редактировать объявление
        /// </summary>
        /// <param name="xUserId"></param>
        /// <param name="updateAnnouncementDto"></param>
        /// <response code="200">Ok</response>
        /// <response code="400">Bad Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict</response>
        /// <response code="500">Internal Server Error</response>
        [HttpPut]
        [Route("/api/announcements/update")]
        [Consumes("application/json")]
        [ValidateModelState]
        [ProducesResponseType(statusCode: 400, type: typeof(UpdateAnnouncementBadRequest))]
        [ProducesResponseType(statusCode: 403, type: typeof(UpdateAnnouncementForbidden))]
        [ProducesResponseType(statusCode: 404, type: typeof(UpdateAnnouncementNotFound))]
        [ProducesResponseType(statusCode: 409, type: typeof(UpdateAnnouncementConflict))]
        public abstract IActionResult UpdateAnnouncement([FromHeader][Required()]Guid xUserId, [FromBody]UpdateAnnouncementDto updateAnnouncementDto);
    }
}
