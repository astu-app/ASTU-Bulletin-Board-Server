/*
 * API Шлюз. Опросы
 *
 * API шлюза для управления опросами
 *
 * The version of the OpenAPI document: 0.0.2
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BulletInBoardServer.Controllers.SurveysController.Models
{ 
    /// <summary>
    /// Результаты опроса
    /// </summary>
    [DataContract]
    public class SurveyResultsDto : IEquatable<SurveyResultsDto>
    {
        /// <summary>
        /// Gets or Sets Voters
        /// </summary>
        [DataMember(Name="voters", EmitDefaultValue=false)]
        public List<VoterDto> Voters { get; set; }

        /// <summary>
        /// Gets or Sets AnswerResults
        /// </summary>
        [DataMember(Name="answerResults", EmitDefaultValue=false)]
        public List<AnswerResultDto> AnswerResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SurveyResultsDto {\n");
            sb.Append("  Voters: ").Append(Voters).Append("\n");
            sb.Append("  AnswerResults: ").Append(AnswerResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SurveyResultsDto)obj);
        }

        /// <summary>
        /// Returns true if SurveyResultsDto instances are equal
        /// </summary>
        /// <param name="other">Instance of SurveyResultsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SurveyResultsDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Voters == other.Voters ||
                    Voters != null &&
                    other.Voters != null &&
                    Voters.SequenceEqual(other.Voters)
                ) && 
                (
                    AnswerResults == other.AnswerResults ||
                    AnswerResults != null &&
                    other.AnswerResults != null &&
                    AnswerResults.SequenceEqual(other.AnswerResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Voters != null)
                    hashCode = hashCode * 59 + Voters.GetHashCode();
                    if (AnswerResults != null)
                    hashCode = hashCode * 59 + AnswerResults.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SurveyResultsDto left, SurveyResultsDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SurveyResultsDto left, SurveyResultsDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
