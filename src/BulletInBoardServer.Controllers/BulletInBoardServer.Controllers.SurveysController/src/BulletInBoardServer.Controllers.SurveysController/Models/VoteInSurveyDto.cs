/*
 * API Шлюз. Опросы
 *
 * API шлюза для управления опросами
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BulletInBoardServer.Controllers.SurveysController.Models
{ 
    /// <summary>
    /// DTO для голосования в опросе
    /// </summary>
    [DataContract]
    public class VoteInSurveyDto : IEquatable<VoteInSurveyDto>
    {
        /// <summary>
        /// Идентификатор опроса
        /// </summary>
        /// <value>Идентификатор опроса</value>
        [DataMember(Name="surveyId", EmitDefaultValue=false)]
        public Guid SurveyId { get; set; }

        /// <summary>
        /// Голоса за варианты ответов в каждом вопросе опроса
        /// </summary>
        /// <value>Голоса за варианты ответов в каждом вопросе опроса</value>
        [DataMember(Name="questionVotes", EmitDefaultValue=false)]
        public List<VoteInQuestionDto> QuestionVotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoteInSurveyDto {\n");
            sb.Append("  SurveyId: ").Append(SurveyId).Append("\n");
            sb.Append("  QuestionVotes: ").Append(QuestionVotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VoteInSurveyDto)obj);
        }

        /// <summary>
        /// Returns true if VoteInSurveyDto instances are equal
        /// </summary>
        /// <param name="other">Instance of VoteInSurveyDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoteInSurveyDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SurveyId == other.SurveyId ||
                    SurveyId != null &&
                    SurveyId.Equals(other.SurveyId)
                ) && 
                (
                    QuestionVotes == other.QuestionVotes ||
                    QuestionVotes != null &&
                    other.QuestionVotes != null &&
                    QuestionVotes.SequenceEqual(other.QuestionVotes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SurveyId != null)
                    hashCode = hashCode * 59 + SurveyId.GetHashCode();
                    if (QuestionVotes != null)
                    hashCode = hashCode * 59 + QuestionVotes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VoteInSurveyDto left, VoteInSurveyDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VoteInSurveyDto left, VoteInSurveyDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
