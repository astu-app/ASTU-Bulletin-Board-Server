/*
 * API Шлюз. Группы пользователей
 *
 * API шлюза для управления группами пользователей
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BulletInBoardServer.Controllers.UserGroupsController.Models
{ 
    /// <summary>
    /// Объект описывает положение группы пользователей в иерархии групп пользователей
    /// </summary>
    [DataContract]
    public class UserGroupHierarchyNodeDto : IEquatable<UserGroupHierarchyNodeDto>
    {
        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public UserGroupSummaryDto Summary { get; set; }

        /// <summary>
        /// Gets or Sets ChildIds
        /// </summary>
        [DataMember(Name="childIds", EmitDefaultValue=false)]
        public List<Guid> ChildIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserGroupHierarchyNodeDto {\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  ChildIds: ").Append(ChildIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserGroupHierarchyNodeDto)obj);
        }

        /// <summary>
        /// Returns true if UserGroupHierarchyNodeDto instances are equal
        /// </summary>
        /// <param name="other">Instance of UserGroupHierarchyNodeDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserGroupHierarchyNodeDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Summary == other.Summary ||
                    Summary != null &&
                    Summary.Equals(other.Summary)
                ) && 
                (
                    ChildIds == other.ChildIds ||
                    ChildIds != null &&
                    other.ChildIds != null &&
                    ChildIds.SequenceEqual(other.ChildIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                    if (ChildIds != null)
                    hashCode = hashCode * 59 + ChildIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserGroupHierarchyNodeDto left, UserGroupHierarchyNodeDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserGroupHierarchyNodeDto left, UserGroupHierarchyNodeDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
