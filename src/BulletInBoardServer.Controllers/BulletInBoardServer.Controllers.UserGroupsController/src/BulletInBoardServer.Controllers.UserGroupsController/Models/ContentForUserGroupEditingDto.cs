/*
 * API Шлюз. Группы пользователей
 *
 * API шлюза для управления группами пользователей
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BulletInBoardServer.Controllers.UserGroupsController.Models
{ 
    /// <summary>
    /// Данные для редактирования группы пользователей
    /// </summary>
    [DataContract]
    public class ContentForUserGroupEditingDto : IEquatable<ContentForUserGroupEditingDto>
    {
        /// <summary>
        /// Идентификатор группы пользователей
        /// </summary>
        /// <value>Идентификатор группы пользователей</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Название группы пользователей
        /// </summary>
        /// <value>Название группы пользователей</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [DataMember(Name="admin", EmitDefaultValue=true)]
        public UserSummaryDto Admin { get; set; }

        /// <summary>
        /// Краткая информация об участниках группы пользователей, включая их права
        /// </summary>
        /// <value>Краткая информация об участниках группы пользователей, включая их права</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<UserSummaryWithMemberRightsDto> Members { get; set; }

        /// <summary>
        /// Список пользователей, которые могут быть назначены администратором или добавлены в группу пользователей. В списке отсутствуют текущий администратор и участники группы пользователей
        /// </summary>
        /// <value>Список пользователей, которые могут быть назначены администратором или добавлены в группу пользователей. В списке отсутствуют текущий администратор и участники группы пользователей</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<UserSummaryDto> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContentForUserGroupEditingDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContentForUserGroupEditingDto)obj);
        }

        /// <summary>
        /// Returns true if ContentForUserGroupEditingDto instances are equal
        /// </summary>
        /// <param name="other">Instance of ContentForUserGroupEditingDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContentForUserGroupEditingDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Admin == other.Admin ||
                    Admin != null &&
                    Admin.Equals(other.Admin)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    other.Members != null &&
                    Members.SequenceEqual(other.Members)
                ) && 
                (
                    Users == other.Users ||
                    Users != null &&
                    other.Users != null &&
                    Users.SequenceEqual(other.Users)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Admin != null)
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                    if (Users != null)
                    hashCode = hashCode * 59 + Users.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContentForUserGroupEditingDto left, ContentForUserGroupEditingDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContentForUserGroupEditingDto left, ContentForUserGroupEditingDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
