/*
 * API Шлюз. Группы пользователей
 *
 * API шлюза для управления группами пользователей
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BulletInBoardServer.Controllers.UserGroupsController.Models
{ 
    /// <summary>
    /// Данные для создания группы пользователей
    /// </summary>
    [DataContract]
    public class GetUsergroupCreateContentDto : IEquatable<GetUsergroupCreateContentDto>
    {
        /// <summary>
        /// Список пользователей, которые могут быть назначены администратором или участником группы пользователей
        /// </summary>
        /// <value>Список пользователей, которые могут быть назначены администратором или участником группы пользователей</value>
        [DataMember(Name="users", EmitDefaultValue=false)]
        public List<UserSummaryDto> Users { get; set; }

        /// <summary>
        /// Список групп пользователей, которые могут быть установлены в качестве родителей или потомков создаваемой группы пользователей. В списке отсутствуют корневые точки графа пользователей
        /// </summary>
        /// <value>Список групп пользователей, которые могут быть установлены в качестве родителей или потомков создаваемой группы пользователей. В списке отсутствуют корневые точки графа пользователей</value>
        [DataMember(Name="usergroups", EmitDefaultValue=false)]
        public List<UserGroupSummaryDto> Usergroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetUsergroupCreateContentDto {\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Usergroups: ").Append(Usergroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetUsergroupCreateContentDto)obj);
        }

        /// <summary>
        /// Returns true if GetUsergroupCreateContentDto instances are equal
        /// </summary>
        /// <param name="other">Instance of GetUsergroupCreateContentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetUsergroupCreateContentDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Users == other.Users ||
                    Users != null &&
                    other.Users != null &&
                    Users.SequenceEqual(other.Users)
                ) && 
                (
                    Usergroups == other.Usergroups ||
                    Usergroups != null &&
                    other.Usergroups != null &&
                    Usergroups.SequenceEqual(other.Usergroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Users != null)
                    hashCode = hashCode * 59 + Users.GetHashCode();
                    if (Usergroups != null)
                    hashCode = hashCode * 59 + Usergroups.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetUsergroupCreateContentDto left, GetUsergroupCreateContentDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetUsergroupCreateContentDto left, GetUsergroupCreateContentDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
