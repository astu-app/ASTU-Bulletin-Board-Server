/*
 * API Шлюз. Группы пользователей
 *
 * API шлюза для управления группами пользователей
 *
 * The version of the OpenAPI document: 0.0.3
 *
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel;
using System.Runtime.Serialization;
using BulletInBoardServer.Controllers.UserGroupsController.Converters;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace BulletInBoardServer.Controllers.UserGroupsController.Models
{ 
        /// <summary>
        /// Ответы:   addMembersToUsergroupForbidden - Пользователь не имеет права добавить пользователя в группу пользователей   userGroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id   usersDoNotExist - В качестве одного или нескольких из id пользователей прикреплен несуществующий в базе id   userAlreadyMember - В качестве одного или нескольких из id прикреплен id пользователя, уже являющегося участником этой группы пользователей   userIsAdmin - В качестве одного из id прикреплен id пользователя, уже являющегося администратором этой группы пользователей 
        /// </summary>
        /// <value>Ответы:   addMembersToUsergroupForbidden - Пользователь не имеет права добавить пользователя в группу пользователей   userGroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id   usersDoNotExist - В качестве одного или нескольких из id пользователей прикреплен несуществующий в базе id   userAlreadyMember - В качестве одного или нескольких из id прикреплен id пользователя, уже являющегося участником этой группы пользователей   userIsAdmin - В качестве одного из id прикреплен id пользователя, уже являющегося администратором этой группы пользователей </value>
        [TypeConverter(typeof(CustomEnumConverter<AddMembersToUsergroupResponses>))]
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AddMembersToUsergroupResponses
        {
            
            /// <summary>
            /// Enum AddMembersToUsergroupForbidden for addMembersToUsergroupForbidden
            /// </summary>
            [EnumMember(Value = "addMembersToUsergroupForbidden")]
            AddMembersToUsergroupForbidden = 1,
            
            /// <summary>
            /// Enum UserGroupDoesNotExist for userGroupDoesNotExist
            /// </summary>
            [EnumMember(Value = "userGroupDoesNotExist")]
            UserGroupDoesNotExist = 2,
            
            /// <summary>
            /// Enum UsersDoNotExist for usersDoNotExist
            /// </summary>
            [EnumMember(Value = "usersDoNotExist")]
            UsersDoNotExist = 3,
            
            /// <summary>
            /// Enum UserAlreadyMember for userAlreadyMember
            /// </summary>
            [EnumMember(Value = "userAlreadyMember")]
            UserAlreadyMember = 4,
            
            /// <summary>
            /// Enum UserIsAdmin for userIsAdmin
            /// </summary>
            [EnumMember(Value = "userIsAdmin")]
            UserIsAdmin = 5
        }
}
