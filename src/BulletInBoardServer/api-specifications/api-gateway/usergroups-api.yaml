openapi: 3.0.3
info:
  title: API Шлюз. Группы пользователей
  description: API шлюза для управления группами пользователей
  version: 0.0.3
servers:
  - url: '/api'
tags:
  - name: UserGroups
    description: API управления группами пользователей
paths:
  /usergroups/create:
    post:
      tags: [ UserGroups ]
      operationId: createUsergroup
      summary: Создать группу пользователей
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUserGroupDto'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                title: createUsergroupCreated
                properties:
                  content:
                    $ref: '#/components/schemas/usergroupIdentifierDto'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                title: createUsergroupBadRequest
                properties:
                  code:
                    # nameIsNullOrWhitespace
                    $ref: '#/components/schemas/createUsergroupResponses'
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: createUsergroupForbidden
                properties:
                  code:
                    # usergroupCreationForbidden
                    $ref: '#/components/schemas/createUsergroupResponses'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                title: createUsergroupNotFound
                properties:
                  code:
                    # usersDoNotExist
                    # userGroupsDoNotExist
                    $ref: '#/components/schemas/createUsergroupResponses'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                title: createUsergroupConflict
                properties:
                  code:
                    # adminCannotBeOrdinaryMember
                    # cyclicDependency
                    $ref: '#/components/schemas/createUsergroupResponses'
        500:
          description: Internal Server Error

  /usergroups/get-all:
    get:
      tags: [ UserGroups ]
      operationId: getAllUsergroups
      summary: Получение списка всех групп пользователей
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                title: getAllUsergroupsOk
                properties:
                  content:
                    $ref: '#/components/schemas/usergroupListDto'
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: getAllUsergroupsForbidden
                properties:
                  code:
                    # getAllUsergroupsForbidden
                    $ref: '#/components/schemas/getAllUsergroupsResponses'
        500:
          description: Internal Server Error
    
  /usergroups/get-owned-list:
    get:
      tags: [ UserGroups ]
      operationId: getOwnedUsergroups
      summary: Получение списка групп пользователей, администратором которой является пользователь, запрашивающий операцию
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                title: getOwnedUsergroupsOk
                properties:
                  content:
                    $ref: '#/components/schemas/usergroupListDto'
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: getOwnedUsergroupsForbidden
                properties:
                  code:
                    # getOwnedUsergroupsForbidden
                    $ref: '#/components/schemas/getOwnedUsergroupsResponses'
        500:
          description: Internal Server Error

  /usergroups/get-owned-hierarchy:
    get:
      tags: [ UserGroups ]
      operationId: getOwnedHierarchy
      summary: Получение иерархии управляемых групп пользователей для пользователя
      responses: 
        200:
          description: Ok
          content:
            application/json:
              schema: 
                type: object
                title: getOwnedHierarchyOk
                properties: 
                  content: 
                    $ref: '#/components/schemas/usergroupHierarchyDto'
        400:
          # Некорректный формат идентификатора
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: getOwnedHierarchyForbidden
                properties:
                  code:
                    # getUsergroupHierarchyForbidden
                    $ref: '#/components/schemas/getOwnedHierarchyResponses'
        500:
          description: Internal Server Error
  
  /usergroups/get-details/{id}:
    get:
      tags: [ UserGroups ]
      operationId: getUsergroupDetails
      summary: Получение подробной информации о группе пользователей
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: Идентификатор группы пользователей
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                title: getUsergroupDetailsOk
                properties:
                  content:
                    $ref: '#/components/schemas/userGroupDetailsDto'
        400:
          # Некорректный формат идентификатора
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: getUsergroupDetailsForbidden
                properties:
                  code:
                    # getUsergroupDetailsForbidden
                    $ref: '#/components/schemas/getUsergroupDetailsResponses'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                title: getUsergroupDetailsNotFound
                properties:
                  code:
                    # userGroupDoesNotExist
                    $ref: '#/components/schemas/getUsergroupDetailsResponses'
        500:
          description: Internal Server Error

  /usergroups/update:
    put:
      tags: [ UserGroups ]
      operationId: updateUsergroup
      summary: Редактирование группы пользователей
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateUserGroupDto'
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
          # Описанные ниже коды + некорректный формат идентификатора
          content:
            application/json:
              schema:
                type: object
                title: updateUsergroupBadRequest
                properties:
                  code:
                    # nameIsNullOrWhitespace
                    $ref: '#/components/schemas/updateUsergroupResponses'
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: updateUsergroupForbidden
                properties:
                  code:
                    # updateUsergroupForbidden
                    $ref: '#/components/schemas/updateUsergroupResponses'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                title: updateUsergroupNotFound
                properties:
                  code:
                    # usersDoNotExist
                    $ref: '#/components/schemas/updateUsergroupResponses'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                title: updateUsergroupConflict
                properties:
                  code:
                    # adminCannotBeOrdinaryMember
                    $ref: '#/components/schemas/updateUsergroupResponses'
        500:
          description: Internal Server Error

  /usergroups/delete:
    delete:
      tags: [ UserGroups ]
      operationId: deleteUsergroup
      summary: Удалить группу пользователей
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usergroupIdentifierDto'
      responses:
        200:
          description: Ok
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                title: deleteUsergroupBadRequest
                properties:
                  code:
                    # incorrectIdentifierFormat
                    $ref: '#/components/schemas/deleteUsergroupResponses'
        401:
          description: Unauthorized
        403:
          # Некорректный формат идентификатора
          description: Forbidden
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                title: deleteUsergroupNotFound
                properties:
                  code:
                    # userGroupDoesNotExist
                    $ref: '#/components/schemas/deleteUsergroupResponses'
        500:
          description: Internal Server Error

  /usergroups/add-members:
    post:
      tags: [ UserGroups ]
      operationId: addMembersToUsergroup
      summary: Добавить пользователей в группу пользователей
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addMembersToUsergroupDto'
      responses:
        200:
          description: Ok
        400:
          # Некорректный формат идентификатора
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: addMembersToUsergroupForbidden
                properties:
                  code:
                    # addMembersToUsergroupForbidden
                    $ref: '#/components/schemas/addMembersToUsergroupResponses'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                title: addMembersToUsergroupNotFound
                properties:
                  code:
                    # userGroupDoesNotExist
                    # usersDoNotExist
                    $ref: '#/components/schemas/addMembersToUsergroupResponses'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                title: addMembersToUsergroupConflict
                properties:
                  code:
                    # userAlreadyMember
                    # userIsAdmin
                    $ref: '#/components/schemas/addMembersToUsergroupResponses'
        500:
          description: Internal Server Error

  /usergroups/delete-members:
    post:
      tags: [ UserGroups ]
      operationId: deleteMembersFromUsergroup
      summary: Удалить пользователей из группы пользователей
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteUsersFromUsergroupDto'
      responses:
        200:
          description: Ok
        400:
          # Некорректный формат идентификатора
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                title: deleteUsersFromUsergroupForbidden
                properties:
                  code:
                    # addUsersToUsergroupForbidden
                    $ref: '#/components/schemas/deleteMembersFromUsergroupResponses'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                title: deleteUsersFromUsergroupConflict
                properties:
                  code:
                    # userIsAdmin
                    $ref: '#/components/schemas/deleteMembersFromUsergroupResponses'
        500:
          description: Internal Server Error

components:
  schemas:
    usergroupIdentifierDto:
      description: Идентификатор группы пользователей
      type: string
      format: uuid

    createUserGroupDto:
      type: object
      required:
        - name
      properties:
        name:
          description: Название группы пользователей
          type: string
        adminId:
          description: Идентификатор администратора группы пользователей
          type: string
          format: uuid
          nullable: true
        memberIds:
          description: Идентификаторы участников группы пользователей
          type: array
          items:
            type: string
            format: uuid
        parentIds:
          description: Идентификаторы групп пользователей, являющихся родителями создаваемой
          type: array
          items:
            type: string
            format: uuid
        childIds:
          description: Идентификаторы групп пользователей, являющихся дочерними создаваемой
          type: array
          items:
            type: string
            format: uuid

    usergroupListDto:
      type: array
      items:
        $ref: '#/components/schemas/userGroupSummaryDto'

    userGroupSummaryDto:
      type: object
      description: Краткая информация о группе пользователей
      properties:
        id:
          description: Идентификатор группы пользователей
          type: string
          format: uuid
        name:
          description: Название группы пользователей
          type: string
        adminName:
          description: Имя администратора группы пользователей
          type: string
          nullable: true

    usergroupHierarchyDto:
      type: object
      description: Иерархия групп пользователей
      properties: 
        usergroups:
          description: Список групп пользователей иерархии с включенными участниками
          type: array
          items:
            $ref: '#/components/schemas/userGroupSummaryWithMembersDto'
        roots:
          description: Корни иерархии
          type: array
          items:
            $ref: '#/components/schemas/userGroupHierarchyNodeDto'

    userGroupHierarchyNodeDto:
      type: object
      description: Объект описывает положение группы пользователей в иерархии групп пользователей
      properties:
        id: 
          description: Идентификатор группы пользователей
          type: string
          format: uuid
        children:
          description: Дочерние группы пользователей
          type: array
          items: 
            $ref: '#/components/schemas/userGroupHierarchyNodeDto' 

    userGroupSummaryWithMembersDto:
      type: object
      description: Краткая информация о группе пользователей, включая ее участников
      properties: 
        summary:
          $ref: '#/components/schemas/userGroupSummaryDto'
        members:
          description: Список участников группы пользователей
          type: array
          items:
            $ref: './users-api.yaml#/components/schemas/selectableUserSummaryDto'

    userGroupDetailsDto:
      type: object
      properties:
        id: 
          description: Идентификатор группы пользователей
          type: string
          format: uuid
        name:
          description: Название группы пользователей
          type: string
        admin:
          $ref: './users-api.yaml#/components/schemas/userSummaryDto'
        members:
          description: Краткая информация об участниках группы пользователей
          type: array
          items:
            $ref: './users-api.yaml#/components/schemas/userSummaryDto'
        parents:
          description: Родительские группы пользователей
          type: array
          items:
            $ref: '#/components/schemas/userGroupSummaryDto'
        children:
          description: Дочерние группы пользователей
          type: array
          items:
            $ref: '#/components/schemas/userGroupSummaryDto'

    updateUserGroupDto:
      type: object
      required:
        - id
        - adminChanged
        - membersChanged
      properties:
        id:
          type: string
          format: uuid
        name:
          description: Новое название группы пользователей
          type: string
          nullable: true
          default: null
        adminChanged:
          description: Изменен ли администратор группы. True, если изменен
          type: boolean
        adminId:
          description: Новый идентификатор администратора. Null отправляется для удаления администратора
          type: string
          format: uuid
          nullable: true
          default: null
        membersChanged:
          description: Изменен ли список групп пользователей. True, если изменен
          type: boolean
        memberIds:
          $ref: './common-schemas.yaml#/components/schemas/updateIdentifierListDto'

    addMembersToUsergroupDto:
      type: object
      properties:
        userGroupId:
          type: string
          format: uuid
        userIds:
          $ref: './common-schemas.yaml#/components/schemas/uniqueIdentifiers'
    
    deleteUsersFromUsergroupDto:
      type: object
      properties:
        userGroupId:
          type: string
          format: uuid
        userIds:
          $ref: './common-schemas.yaml#/components/schemas/uniqueIdentifiers'

    createUsergroupResponses:
      type: string
      enum:
        # 400
        - nameIsNullOrWhitespace
        # 403
        - usergroupCreationForbidden
        # 404
        - usersDoNotExist
        - userGroupsDoNotExist
        # 409
        - adminCannotBeOrdinaryMember
        - cyclicDependency
      description: >
        Ответы:
          nameIsNullOrWhitespace - Название группы пользователей null или состоит исключительно из пробельных символов
          usergroupCreationForbidden - Пользователь не имеет права создать группу пользователей
          usersDoNotExist - В качестве одного или нескольких id пользователей прикреплен несуществующий в базе id
          userGroupsDoNotExist - В качестве одного или нескольких id групп пользователей прикреплен несуществующий в базе id
          adminCannotBeOrdinaryMember - Идентификатор администратора передан в массиве идентификаторов участников
          cyclicDependency - Группа пользователей не может быть создана, так как порождает цикл на графе групп пользователей

    getAllUsergroupsResponses:
      type: string
      enum:
        # 403
        - getAllUsergroupsForbidden
      description: >
        Ответы:
          getAllUsergroupsForbidden - Пользователь не имеет права получать список всех групп пользователей

    getOwnedUsergroupsResponses:
      type: string
      enum:
        # 403
        - getOwnedUsergroupsForbidden
      description: >
        Ответы:
          getOwnedUsergroupsForbidden - Пользователь не имеет права получать список групп пользователей, которыми управляет

    getUsergroupDetailsResponses:
      type: string
      enum:
        # 403
        - getUsergroupDetailsForbidden
        # 404
        - userGroupDoesNotExist
      description: >
        Ответы:
          getUsergroupDetailsForbidden - Пользователь не имеет права запрашивать детали группы пользователей
          userGroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id     

    getOwnedHierarchyResponses:
      type: string
      enum:
        # 403
        - getUsergroupHierarchyForbidden
      description: >
        Ответы:
          getUsergroupHierarchyForbidden - Пользователь не имеет права запрашивать иерархию групп пользователей

    updateUsergroupResponses:
      type: string
      enum:
        # 400
        - nameIsNullOrWhitespace
        # 403
        - updateUsergroupForbidden
        # 404
        - usersDoNotExist
        - userGroupsDoNotExist
        # 409
        - adminCannotBeOrdinaryMember
      description: >
        Ответы:
          nameIsNullOrWhitespace - Имя не содержит символов или содержит исключительно пробельные
          updateUsergroupForbidden - Пользователь не имеет права редактировать группу пользователей
          usersDoNotExist - В качестве одного или нескольких id пользователей прикреплен несуществующий в базе id
          adminCannotBeOrdinaryMember - Идентификатор администратора передан в массиве идентификаторов участников

    deleteUsergroupResponses:
      type: string
      enum:
        # 403
        - usergroupDeletionForbidden
        # 404
        - userGroupDoesNotExist
      description: >
        Ответы:
          usergroupDeletionForbidden - Пользователь не имеет права удалить группу пользователей
          userGroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id

    addMembersToUsergroupResponses:
      type: string
      enum:
        # 403
        - addMembersToUsergroupForbidden
        # 404
        - userGroupDoesNotExist
        - usersDoNotExist
        # 409
        - userAlreadyMember
        - userIsAdmin
      description: >
        Ответы:
          addMembersToUsergroupForbidden - Пользователь не имеет права добавить пользователя в группу пользователей
          userGroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id
          usersDoNotExist - В качестве одного или нескольких из id пользователей прикреплен несуществующий в базе id
          userAlreadyMember - В качестве одного или нескольких из id прикреплен id пользователя, уже являющегося участником этой группы пользователей
          userIsAdmin - В качестве одного из id прикреплен id пользователя, уже являющегося администратором этой группы пользователей

    deleteMembersFromUsergroupResponses:
      type: string
      enum:
        # 403
        - removeUsersFromUsergroupForbidden
        # 409
        - userIsAdmin
      description: >
        Ответы:
          addMembersToUsergroupForbidden - Пользователь не имеет права удалить пользователя из группы пользователей
          userIsAdmin - В качестве одного из id прикреплен id пользователя, являющегося администратором этой группы пользователей
