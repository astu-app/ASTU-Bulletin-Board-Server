//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace BulletInBoardServer.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ISurveysController
    {

        /// <summary>
        /// Создать опрос
        /// </summary>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<SwaggerResponse<CreateSurveyCreated>> CreateSurveyAsync(CreateSurveyDto body);

        /// <summary>
        /// Получить детали выбранного опроса
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<Response>> GetSurveyDetailsAsync(System.Guid? body);

        /// <summary>
        /// Закрыть опрос
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<Response2>> CloseSurveyAsync(System.Guid body);

        /// <summary>
        /// Получить результаты опроса
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<Response3>> GetSurveysResultsAsync(System.Guid body);

        /// <summary>
        /// Скачать результаты опроса
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<DownloadSurveyResultsOk>> DownloadSurveyResultsAsync(System.Guid body);

        /// <summary>
        /// Проголосовать в вопросе
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<VoteInQuestionOk>> VoteInQuestionAsync(VoteInSurveyDto body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]

    public partial class SurveysController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ISurveysController _implementation;

        public SurveysController(ISurveysController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Создать опрос
        /// </summary>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("surveys/create", Name = "createSurvey")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateSurvey([Microsoft.AspNetCore.Mvc.FromBody] CreateSurveyDto body)
        {

            var result = await _implementation.CreateSurveyAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Получить детали выбранного опроса
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("survey/get-details", Name = "getSurveyDetails")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> GetSurveyDetails([Microsoft.AspNetCore.Mvc.FromBody] System.Guid? body)
        {

            var result = await _implementation.GetSurveyDetailsAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Закрыть опрос
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("survey/close-survey", Name = "closeSurvey")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CloseSurvey([Microsoft.AspNetCore.Mvc.FromBody] System.Guid body)
        {

            var result = await _implementation.CloseSurveyAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Получить результаты опроса
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("survey/get-results", Name = "getSurveysResults")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> GetSurveysResults([Microsoft.AspNetCore.Mvc.FromBody] System.Guid body)
        {

            var result = await _implementation.GetSurveysResultsAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Скачать результаты опроса
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("survey/download-results", Name = "downloadSurveyResults")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DownloadSurveyResults([Microsoft.AspNetCore.Mvc.FromBody] System.Guid body)
        {

            var result = await _implementation.DownloadSurveyResultsAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Проголосовать в вопросе
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("question/vote", Name = "voteInQuestion")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> VoteInQuestion([Microsoft.AspNetCore.Mvc.FromBody] VoteInSurveyDto body)
        {

            var result = await _implementation.VoteInQuestionAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSurveyDto
    {
        /// <summary>
        /// Вопросы опроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.List<CreateQuestionDto> Questions { get; set; }

        /// <summary>
        /// Анонимен ли опрос
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnonymous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAnonymous { get; set; }

        /// <summary>
        /// Срок окончания голосования. Null, если голосование не ограничено по сроку
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voteUntil", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? VoteUntil { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SurveyDetailsDto
    {
        /// <summary>
        /// Идентификатор опроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Открыт ли опрос
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOpen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsOpen { get; set; } = true;

        /// <summary>
        /// Анонимен ли опрос
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnonymous", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAnonymous { get; set; } = false;

        /// <summary>
        /// Время окончания голосования (если задано)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voteFinishedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? VoteFinishedAt { get; set; }

        /// <summary>
        /// Вопросы опроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.List<object> Questions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// DTO для голосования в опросе
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoteInSurveyDto
    {
        /// <summary>
        /// Идентификатор опроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surveyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid SurveyId { get; set; }

        /// <summary>
        /// Голоса за варианты ответов в каждом вопросе опроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questionVotes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.List<VoteInQuestionDto> QuestionVotes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// DTO для голосования в вопросе опроса
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoteInQuestionDto
    {
        /// <summary>
        /// Идентификатор вопроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid QuestionId { get; set; }

        /// <summary>
        /// Массив идентификаторов вариантов ответов
        /// </summary>
        [Newtonsoft.Json.JsonProperty("answerIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.List<System.Guid> AnswerIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Результаты опроса
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SurveyResultsDto
    {
        [Newtonsoft.Json.JsonProperty("voters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VotersDto Voters { get; set; }

        [Newtonsoft.Json.JsonProperty("answerResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnswerResultsDto AnswerResults { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateQuestionDto
    {
        /// <summary>
        /// Содержимое вопроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Доступен ли выбор нескольких вариантов ответов
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMultipleChoiceAllowed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMultipleChoiceAllowed { get; set; }

        /// <summary>
        /// Варианты ответов
        /// </summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(2)]
        public System.Collections.Generic.List<CreateAnswerDto> Answers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionDetailsDto
    {
        /// <summary>
        /// Идентификатор опроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Текстовое содержимое вопроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Разрешен ли множественный выбор
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMultipleChoiceAllowed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMultipleChoiceAllowed { get; set; } = false;

        /// <summary>
        /// Количество проголосовавших
        /// </summary>
        [Newtonsoft.Json.JsonProperty("votersAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int VotersAmount { get; set; }

        /// <summary>
        /// Варианты ответов опроса
        /// </summary>
        [Newtonsoft.Json.JsonProperty("answers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(2)]
        public System.Collections.Generic.List<QuestionAnswerDetailsDto> Answers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QuestionAnswerDetailsDto
    {
        /// <summary>
        /// Идентификатор варианта ответа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Текстовое содержимое варианта ответа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// Количество пользователей, проголосовавших за вариант ответа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("votersAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int VotersAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAnswerDto
    {
        /// <summary>
        /// текстовое содержимое варианта ответа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VotersDto : System.Collections.ObjectModel.Collection<VoterDto>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoterDto
    {
        /// <summary>
        /// Числовой идентификатор пользователя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// Имя пользователя
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerResultsDto : System.Collections.ObjectModel.Collection<AnswerResultDto>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnswerResultDto
    {
        /// <summary>
        /// Идентификатор варианта ответа
        /// </summary>
        [Newtonsoft.Json.JsonProperty("questionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid QuestionId { get; set; }

        /// <summary>
        /// Числовые идентификаторы проголосовавших пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voterIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> VoterIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ответы:
    /// <br/>  created - Опрос создан
    /// <br/>  unauthorized - 
    /// <br/>  createSurveyForbidden - Пользователь не имеет права создать опрос
    /// <br/>  votingClosesBeforeAnnouncementPublication - Срок окончания голосования наступит до момента публикации объявления
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateSurveyResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"createSurveyForbidden")]
        CreateSurveyForbidden = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"votingClosesBeforeAnnouncementPublication")]
        VotingClosesBeforeAnnouncementPublication = 3,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - 
    /// <br/>  detailsAccessForbidden - Пользователь не имеет права просмотреть подробности этого опроса
    /// <br/>  surveyDoesNotExist - Опрос не существует
    /// <br/>  announcementWithSurveyNotYetPublished - Объявление с опросом еще не опубликовано
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetSurveyDetailsResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"detailsAccessForbidden")]
        DetailsAccessForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyDoesNotExist")]
        SurveyDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementWithSurveyNotYetPublished")]
        AnnouncementWithSurveyNotYetPublished = 5,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - 
    /// <br/>  surveyClosingForbidden - Пользователь не имеет права закрыть этот опрос
    /// <br/>  surveyDoesNotExist - Опрос не существует
    /// <br/>  surveyAlreadyClosed - Опрос уже закрыт
    /// <br/>  announcementWithSurveyNotYetPublished - Объявление с опросом еще не опубликовано
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CloseSurveyResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyClosingForbidden")]
        SurveyClosingForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyDoesNotExist")]
        SurveyDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyAlreadyClosed")]
        SurveyAlreadyClosed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementWithSurveyNotYetPublished")]
        AnnouncementWithSurveyNotYetPublished = 6,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - 
    /// <br/>  surveyResultsAccessForbidden - Пользователь не имеет права получить результаты этого опроса
    /// <br/>  surveyDoesNotExist - Опрос не существует
    /// <br/>  announcementWithSurveyNotYetPublished - Объявление с опросом еще не опубликовано
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetSurveysResultsResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyResultsAccessForbidden")]
        SurveyResultsAccessForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyDoesNotExist")]
        SurveyDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementWithSurveyNotYetPublished")]
        AnnouncementWithSurveyNotYetPublished = 5,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - 
    /// <br/>  surveyResultsDownloadingForbidden - Пользователь не имеет права выгрузить результаты этого опроса
    /// <br/>  surveyDoesNotExist - Опрос не существует
    /// <br/>  announcementWithSurveyNotYetPublished - Объявление с опросом еще не опубликовано
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DownloadSurveyResultsResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyResultsDownloadingForbidden")]
        SurveyResultsDownloadingForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyDoesNotExist")]
        SurveyDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementWithSurveyNotYetPublished")]
        AnnouncementWithSurveyNotYetPublished = 5,

    }

    /// <summary>
    /// Ответы: 
    /// <br/>  ok - Ок 
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - 
    /// <br/>  votingForbidden - Пользователь не имеет права голосовать в опросе
    /// <br/>  surveyDoesNotExist - Опрос не существует
    /// <br/>  questionDoesNotExist - Вопрос не существует
    /// <br/>  answerDoesNotExist - Вариант ответа не существует
    /// <br/>  surveyClosed - Опрос закрыт
    /// <br/>  announcementWithSurveyNotYetPublished - Объявление с опросом еще не опубликовано
    /// <br/>  surveyAlreadyVoted - Голос в опросе уже отдан
    /// <br/>  cannotSelectMultipleAnswersInSingleChoiceQuestion - В вопросе с единственным выбором нельзя выбрать несколько вариантов ответов
    /// <br/>  selectedQuestionsBelongToDifferentSurveys - Перечисленные вопросы относятся к разным опросам
    /// <br/>  selectedAnswersBelongToDifferentQuestions - Перечисленные варианты ответов относятся к разным вопросам
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VoteInSurveyResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"votingForbidden")]
        VotingForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyDoesNotExist")]
        SurveyDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"questionDoesNotExist")]
        QuestionDoesNotExist = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"answerDoesNotExist")]
        AnswerDoesNotExist = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyClosed")]
        SurveyClosed = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementWithSurveyNotYetPublished")]
        AnnouncementWithSurveyNotYetPublished = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"answerAlreadyVoted")]
        AnswerAlreadyVoted = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"cannotSelectMultipleAnswersInSingleChoiceQuestion")]
        CannotSelectMultipleAnswersInSingleChoiceQuestion = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"selectedQuestionsBelongToDifferentSurveys")]
        SelectedQuestionsBelongToDifferentSurveys = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"selectedAnswersBelongToDifferentQuestions")]
        SelectedAnswersBelongToDifferentQuestions = 12,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - 
    /// <br/>  votingForbidden - Пользователь не имеет права голосовать в этом опросе
    /// <br/>  questionDoesNotExist - Вопрос не существует 
    /// <br/>  surveyClosed - Опрос закрыт
    /// <br/>  surveyNotVoted - Пользователь не проголосовал в вопросе
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CancelVoteInQuestionResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"votingForbidden")]
        VotingForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"questionDoesNotExist")]
        QuestionDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyClosed")]
        SurveyClosed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"surveyNotVoted")]
        SurveyNotVoted = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Identifiers : System.Collections.ObjectModel.Collection<System.Guid>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSurveyCreated
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Content { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateSurveyResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SurveyDetailsDto Content { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetSurveyDetailsResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CloseSurveyResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SurveyResultsDto Content { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetSurveysResultsResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DownloadSurveyResultsOk
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Content { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DownloadSurveyResultsResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VoteInQuestionOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VoteInSurveyResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625