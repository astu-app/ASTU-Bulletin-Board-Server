//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace BulletInBoardServer.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IUserGroupsController
    {

        /// <summary>
        /// Создать группу пользователей
        /// </summary>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<CreateUsergroupCreated> CreateUsergroupAsync(CreateUsergroupDto body);

        /// <summary>
        /// Получение списка всех групп пользователей
        /// </summary>

        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<GetAllUsergroupsOk> GetAllUsergroupsAsync();

        /// <summary>
        /// Получение подробной информации о группе пользователей
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<GetUsergroupDetailsOk> GetUsergroupDetailsAsync(UsergroupIdentifierDto body);

        /// <summary>
        /// Редактирование группы пользователей
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<UpdateUsergroupOk> UpdateUsergroupAsync(UpdateUsergroupDto body);

        /// <summary>
        /// Удалить группу пользователей
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<DeleteUsergroupOk> DeleteUsergroupAsync(UsergroupIdentifierDto body);

        /// <summary>
        /// Добавить пользователей в группу пользователей
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<AddUsersToUsergroupOk> AddUsersToUsergroupAsync(AddUsersToUsergroupDto body);

        /// <summary>
        /// Удалить пользователей из группы пользователей
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<DeleteUsersFromUsergroupOK> DeleteUsersFromUsergroupAsync(AddUsersToUsergroupDto body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]

    public partial class UserGroupsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IUserGroupsController _implementation;

        public UserGroupsController(IUserGroupsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Создать группу пользователей
        /// </summary>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("usergroups/create", Name = "createUsergroup")]
        public System.Threading.Tasks.Task<CreateUsergroupCreated> CreateUsergroup([Microsoft.AspNetCore.Mvc.FromBody] CreateUsergroupDto body)
        {

            return _implementation.CreateUsergroupAsync(body);
        }

        /// <summary>
        /// Получение списка всех групп пользователей
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("usergroups/get-all", Name = "getAllUsergroups")]
        public System.Threading.Tasks.Task<GetAllUsergroupsOk> GetAllUsergroups()
        {

            return _implementation.GetAllUsergroupsAsync();
        }

        /// <summary>
        /// Получение подробной информации о группе пользователей
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("usergroups/get-details", Name = "getUsergroupDetails")]
        public System.Threading.Tasks.Task<GetUsergroupDetailsOk> GetUsergroupDetails([Microsoft.AspNetCore.Mvc.FromBody] UsergroupIdentifierDto body)
        {

            return _implementation.GetUsergroupDetailsAsync(body);
        }

        /// <summary>
        /// Редактирование группы пользователей
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("usergroups/update", Name = "updateUsergroup")]
        public System.Threading.Tasks.Task<UpdateUsergroupOk> UpdateUsergroup([Microsoft.AspNetCore.Mvc.FromBody] UpdateUsergroupDto body)
        {

            return _implementation.UpdateUsergroupAsync(body);
        }

        /// <summary>
        /// Удалить группу пользователей
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("usergroups/delete", Name = "deleteUsergroup")]
        public System.Threading.Tasks.Task<DeleteUsergroupOk> DeleteUsergroup([Microsoft.AspNetCore.Mvc.FromBody] UsergroupIdentifierDto body)
        {

            return _implementation.DeleteUsergroupAsync(body);
        }

        /// <summary>
        /// Добавить пользователей в группу пользователей
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("usergroups/add-users", Name = "addUsersToUsergroup")]
        public System.Threading.Tasks.Task<AddUsersToUsergroupOk> AddUsersToUsergroup([Microsoft.AspNetCore.Mvc.FromBody] AddUsersToUsergroupDto body)
        {

            return _implementation.AddUsersToUsergroupAsync(body);
        }

        /// <summary>
        /// Удалить пользователей из группы пользователей
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("usergroups/delete-users", Name = "deleteUsersFromUsergroup")]
        public System.Threading.Tasks.Task<DeleteUsersFromUsergroupOK> DeleteUsersFromUsergroup([Microsoft.AspNetCore.Mvc.FromBody] AddUsersToUsergroupDto body)
        {

            return _implementation.DeleteUsersFromUsergroupAsync(body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsergroupIdentifierDto
    {
        [Newtonsoft.Json.JsonProperty("announcementId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AnnouncementId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUsergroupDto
    {
        /// <summary>
        /// Название группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Идентификатор администратора группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? AdminId { get; set; }

        /// <summary>
        /// Идентификаторы участников группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> MemberIds { get; set; }

        /// <summary>
        /// Идентификаторы групп пользователей, являющихся родителями создаваемой
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> ParentIds { get; set; }

        /// <summary>
        /// Идентификаторы групп пользователей, являющихся дочерними создаваемой
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> ChildIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Краткая информация о группе пользователей
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsergroupSummaryDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsergroupListDto : System.Collections.ObjectModel.Collection<UsergroupHierarchyNodeDto>
    {

    }

    /// <summary>
    /// Объект описывает положение группы пользователей в иерархии групп пользователей
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsergroupHierarchyNodeDto
    {
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsergroupSummaryDto Summary { get; set; }

        [Newtonsoft.Json.JsonProperty("childIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> ChildIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UsergroupDetailsDto
    {
        /// <summary>
        /// Название группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSummaryDto Admin { get; set; }

        /// <summary>
        /// Краткая информация об участниках группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UserSummaryDto> Members { get; set; }

        /// <summary>
        /// Родительские группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UsergroupSummaryDto> Parents { get; set; }

        /// <summary>
        /// Дочерние группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UsergroupSummaryDto> Children { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateUsergroupDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Новое название группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Новый идентификатор администратора. Null отправляется для удаления администратора
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? AdminId { get; set; }

        /// <summary>
        /// Идентификаторы участников группы пользователей
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid> MemberIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddUsersToUsergroupDto
    {
        [Newtonsoft.Json.JsonProperty("usergroupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UsergroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("userIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifiers UserIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveUsersFromUsergroupDto
    {
        [Newtonsoft.Json.JsonProperty("usergroupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UsergroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("userIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Identifiers UserIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ответы:
    /// <br/>  created - Группа пользователей создана
    /// <br/>  nameNullOrWhitespace - Название группы пользователей null или состоит исключительно из пробельных символов
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  usergroupCreationForbidden - Пользователь не имеет права создать группу пользователей
    /// <br/>  usersDoNotExist - В качестве одного или нескольких id пользователей прикреплен несуществующий в базе id
    /// <br/>  usergroupsDoNotExist - В качестве одного или нескольких id групп пользователей прикреплен несуществующий в базе id
    /// <br/>  adminCannotBeOrdinaryMember - Идентификатор администратора передан в массиве идентификаторов участников
    /// <br/>  cyclicDependency - Группа пользователей не может быть создана, так как порождает цикл на графе групп пользователей
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateUsergroupResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"nameNullOrWhitespace")]
        NameNullOrWhitespace = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"usergroupCreationForbidden")]
        UsergroupCreationForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"usersDoNotExist")]
        UsersDoNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"usergroupsDoNotExist")]
        UsergroupsDoNotExist = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"adminCannotBeOrdinaryMember")]
        AdminCannotBeOrdinaryMember = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"cyclicDependency")]
        CyclicDependency = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetAllUsergroupsResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"getAllUsergroupsForbidden")]
        GetAllUsergroupsForbidden = 2,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора 
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  getUsergroupDetailsForbidden - Пользователь не имеет права запрашивать детали группы пользователей
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetUsergroupDetailsResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"getUsergroupDetailsForbidden")]
        GetUsergroupDetailsForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"usergroupDoesNotExist")]
        UsergroupDoesNotExist = 4,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  nameIsEmptyOrWhitespace - Имя не содержит символов или содержит исключительно пробельные
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции 
    /// <br/>  updateUsergroupForbidden - Пользователь не имеет права редактировать группу пользователей
    /// <br/>  usersDoNotExist - В качестве одного или нескольких id пользователей прикреплен несуществующий в базе id
    /// <br/>  adminCannotBeOrdinaryMember - Идентификатор администратора передан в массиве идентификаторов участников
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpdateUsergroupResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"nameIsEmptyOrWhitespace")]
        NameIsEmptyOrWhitespace = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"updateUsergroupForbidden")]
        UpdateUsergroupForbidden = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"usersDoNotExist")]
        UsersDoNotExist = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"adminCannotBeOrdinaryMember")]
        AdminCannotBeOrdinaryMember = 6,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции 
    /// <br/>  usergroupDeletionForbidden - Пользователь не имеет права удалить группу пользователей
    /// <br/>  usergroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeleteUsergroupResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"usergroupDeletionForbidden")]
        UsergroupDeletionForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"usergroupDoesNotExist")]
        UsergroupDoesNotExist = 4,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции 
    /// <br/>  addUsersToUsergroupForbidden - Пользователь не имеет права добавить пользователя в группу пользователей
    /// <br/>  usergroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id
    /// <br/>  usersDoNotExist - В качестве одного или нескольких из id пользователей прикреплен несуществующий в базе id
    /// <br/>  userAlreadyMember - В качестве одного или нескольких из id прикреплен id пользователя, уже являющегося участником этой группы пользователей
    /// <br/>  userIsAdmin - В качестве одного из id прикреплен id пользователя, уже являющегося администратором этой группы пользователей
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddUsersToUsergroupResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"addUsersToUsergroupForbidden")]
        AddUsersToUsergroupForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"usergroupDoesNotExist")]
        UsergroupDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"usersDoNotExist")]
        UsersDoNotExist = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"userAlreadyMember")]
        UserAlreadyMember = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"userIsAdmin")]
        UserIsAdmin = 7,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции 
    /// <br/>  addUsersToUsergroupForbidden - Пользователь не имеет права удалить пользователя из группы пользователей
    /// <br/>  usergroupDoesNotExist - В качестве id группы пользователей прикреплен несуществующий в базе id
    /// <br/>  usersDoNotExist - В качестве одного или нескольких из id пользователей прикреплен несуществующий в базе id
    /// <br/>  userIsNotAMember - В качестве одного или нескольких из id прикреплен id пользователя, не являющегося участником этой группы пользователей
    /// <br/>  userIsAdmin - В качестве одного из id прикреплен id пользователя, являющегося администратором этой группы пользователей
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeleteUsersFromUsergroupResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"removeUsersFromUsergroupForbidden")]
        RemoveUsersFromUsergroupForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"usergroupDoesNotExist")]
        UsergroupDoesNotExist = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"usersDoNotExist")]
        UsersDoNotExist = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"userIsNotAMember")]
        UserIsNotAMember = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"userIsAdmin")]
        UserIsAdmin = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateUsergroupCreated
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateUsergroupResponses Code { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsergroupIdentifierDto Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllUsergroupsOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetAllUsergroupsResponses Code { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsergroupListDto Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUsergroupDetailsOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetUsergroupDetailsResponses Code { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UsergroupDetailsDto Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateUsergroupOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateUsergroupResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteUsergroupOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeleteUsergroupResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddUsersToUsergroupOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AddUsersToUsergroupResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteUsersFromUsergroupOK
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeleteUsersFromUsergroupResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625