//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace BulletInBoardServer.Controllers
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IAnnouncementCategoriesController
    {

        /// <summary>
        /// Создать категорию объявлений
        /// </summary>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<SwaggerResponse<CreateAnnouncementCategoryCreated>> CreateAnnouncementCategoryAsync(CreateAnnouncementCategoryDto body);

        /// <summary>
        /// Получить список всех категорий объявлений
        /// </summary>

        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<GetAllAnnouncementCategoriesOk>> GetAllAnnouncementCategoriesAsync();

        /// <summary>
        /// Редактировать категорию объявлений
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<UpdateAnnouncementCategoryOk>> UpdateAnnouncementCategoryAsync(UpdateAnnouncementCategoryDto body);

        /// <summary>
        /// Удалить категорию объявлений
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<DeleteAnnouncementCategoryOk>> DeleteAnnouncementCategoryAsync(System.Guid body);

        /// <summary>
        /// Получить список всех категорий объявлений с отмеченными подписками для текущего пользователя
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<GetAnnouncementCategoriesSubscriptionsOk>> GetAnnouncementCategoriesSubscriptionsAsync(System.Collections.Generic.IEnumerable<System.Guid> body);

        /// <summary>
        /// Обновить список подписок текущего пользователя
        /// </summary>


        /// <returns>Ok</returns>

        System.Threading.Tasks.Task<SwaggerResponse<UpdateAnnouncementCategoriesSubscriptionsOk>> UpdateAnnouncementCategoriesSubscriptionsAsync(System.Collections.Generic.IEnumerable<System.Guid> body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("api")]

    public partial class AnnouncementCategoriesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IAnnouncementCategoriesController _implementation;

        public AnnouncementCategoriesController(IAnnouncementCategoriesController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Создать категорию объявлений
        /// </summary>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("announcement-categories/create", Name = "createAnnouncementCategory")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateAnnouncementCategory([Microsoft.AspNetCore.Mvc.FromBody] CreateAnnouncementCategoryDto body)
        {

            var result = await _implementation.CreateAnnouncementCategoryAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Получить список всех категорий объявлений
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("announcement-categories/get-list", Name = "getAllAnnouncementCategories")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> GetAllAnnouncementCategories()
        {

            var result = await _implementation.GetAllAnnouncementCategoriesAsync().ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Редактировать категорию объявлений
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("announcement-categories/update", Name = "updateAnnouncementCategory")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdateAnnouncementCategory([Microsoft.AspNetCore.Mvc.FromBody] UpdateAnnouncementCategoryDto body)
        {

            var result = await _implementation.UpdateAnnouncementCategoryAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Удалить категорию объявлений
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("announcement-categories/delete", Name = "deleteAnnouncementCategory")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteAnnouncementCategory([Microsoft.AspNetCore.Mvc.FromBody] System.Guid body)
        {

            var result = await _implementation.DeleteAnnouncementCategoryAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Получить список всех категорий объявлений с отмеченными подписками для текущего пользователя
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("announcement-categories/get-subscribtions", Name = "getAnnouncementCategoriesSubscriptions")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> GetAnnouncementCategoriesSubscriptions([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<System.Guid> body)
        {

            var result = await _implementation.GetAnnouncementCategoriesSubscriptionsAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

        /// <summary>
        /// Обновить список подписок текущего пользователя
        /// </summary>
        /// <returns>Ok</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("announcement-categories/update-subscribtions", Name = "updateAnnouncementCategoriesSubscriptions")]
        public async System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdateAnnouncementCategoriesSubscriptions([Microsoft.AspNetCore.Mvc.FromBody] System.Collections.Generic.IEnumerable<System.Guid> body)
        {

            var result = await _implementation.UpdateAnnouncementCategoriesSubscriptionsAsync(body).ConfigureAwait(false);

            var status = result.StatusCode;
            Microsoft.AspNetCore.Mvc.ObjectResult response = new Microsoft.AspNetCore.Mvc.ObjectResult(result.Result) { StatusCode = status };

            foreach (var header in result.Headers)
                Request.HttpContext.Response.Headers.Add(header.Key, new Microsoft.Extensions.Primitives.StringValues(header.Value.ToArray()));

            return response;
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAnnouncementCategoryDto
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("colorHex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorHex { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AnnouncementCategoriesListDto
    {
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AnnouncementCategoryDetailsDto> Categories { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateAnnouncementCategoryDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("colorHex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorHex { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Ответы:
    /// <br/>  created - Категория объявлений создана
    /// <br/>  colorIsIncorrectHex - Код цвета передан не в HEX формате 
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  announcementCategoryCreationForbidden - Пользователь не имеет права создать категорию объявлений
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateAnnouncementCategoryResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"colorIsIncorrectHex")]
        ColorIsIncorrectHex = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementCategoryCreationForbidden")]
        AnnouncementCategoryCreationForbidden = 3,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  announcementCategoryListAccessForbidden - Пользователь не имеет права получить список категорий объявлений
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetAllAnnouncementCategoriesResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementCategoryListAccessForbidden")]
        AnnouncementCategoryListAccessForbidden = 2,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  announcementCategoryUpdatingForbidden - Пользователь не имеет права редактировать категорию объявлений
    /// <br/>  announcementCategoryDoesNotExist - Категория объявлений с указанным id не существует  
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpdateAnnouncementCategoryResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementCategoryUpdatingForbidden")]
        AnnouncementCategoryUpdatingForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementCategoryDoesNotExist")]
        AnnouncementCategoryDoesNotExist = 4,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  announcementCategoryDeletionForbidden - Пользователь не имеет права удалить категорию объявлений
    /// <br/>  announcementCategoryDoesNotExist - Категория объявлений с указанным id не существует
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeleteAnnouncementCategoryResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementCategoryDeletionForbidden")]
        AnnouncementCategoryDeletionForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"announcementCategoryDoesNotExist")]
        AnnouncementCategoryDoesNotExist = 4,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  getSubscriptionsListForbidden - Пользователь не имеет права получить список категорий объявлений, на которые подписан
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GetAnnouncementCategoriesSubscriptionsResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"getSubscriptionsListForbidden")]
        GetSubscriptionsListForbidden = 2,

    }

    /// <summary>
    /// Ответы:
    /// <br/>  ok - Ок
    /// <br/>  incorrectIdentifierFormat - Некорректный формат идентификатора
    /// <br/>  unauthorized - Пользователь не авторизован для выполнения операции
    /// <br/>  updateSubscriptionsForbidden - Пользователь не имеет права получить список категорий объявлений, на которые подписан
    /// <br/>  categoriesDoNotExist - В качестве одного или нескольких id категорий объявлений прикреплен несуществующий в базе id
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UpdateAnnouncementCategoriesSubscriptionsResponses
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incorrectIdentifierFormat")]
        IncorrectIdentifierFormat = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unauthorized")]
        Unauthorized = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"updateSubscriptionsForbidden")]
        UpdateSubscriptionsForbidden = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"categoriesDoNotExist")]
        CategoriesDoNotExist = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateAnnouncementCategoryCreated
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateAnnouncementCategoryResponses Code { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAllAnnouncementCategoriesOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetAllAnnouncementCategoriesResponses Code { get; set; }

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AnnouncementCategoriesListDto Content { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateAnnouncementCategoryOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateAnnouncementCategoryResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeleteAnnouncementCategoryOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeleteAnnouncementCategoryResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAnnouncementCategoriesSubscriptionsOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GetAnnouncementCategoriesSubscriptionsResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateAnnouncementCategoriesSubscriptionsOk
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateAnnouncementCategoriesSubscriptionsResponses Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625